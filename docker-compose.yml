# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: "3.7"

services:
  # Database Service (Mysql)
  mysql-db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: pingstatustracker
      MYSQL_USER: radu
      MYSQL_PASSWORD: radu123456
      MYSQL_ROOT_PASSWORD: root123456
    volumes:
      - mysql-db:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Backend Service
  spring-api:
    build:
      context: .
      dockerfile: Spring.Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: on-failure
    depends_on:
      - mysql-db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/pingstatustracker?autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: radu
      SPRING_DATASOURCE_PASSWORD: radu123456
      # Comma separated list of allowed CORS origins
      CLIENT_ALLOWED_CORS_ORIGINS: http://localhost:8081
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  angular-client:
    build:
      context: ./serverpingstatustracker-app
      dockerfile: Angular.Dockerfile
      args:
        API_BASE_URL: http://localhost:8080
    ports:
      - "8081:80" # Map the exposed port 80 on the container to port 8081 on the host machine
    restart: unless-stopped
    depends_on:
      - spring-api
    networks:
      - frontend

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:

volumes:
  mysql-db:
